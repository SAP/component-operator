/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and component-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apiscorecssapcomv1alpha1 "github.com/sap/component-operator/api/v1alpha1"
	versioned "github.com/sap/component-operator/pkg/client/clientset/versioned"
	internalinterfaces "github.com/sap/component-operator/pkg/client/informers/externalversions/internalinterfaces"
	corecssapcomv1alpha1 "github.com/sap/component-operator/pkg/client/listers/core.cs.sap.com/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ComponentInformer provides access to a shared informer and lister for
// Components.
type ComponentInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() corecssapcomv1alpha1.ComponentLister
}

type componentInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewComponentInformer constructs a new informer for Component type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewComponentInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredComponentInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredComponentInformer constructs a new informer for Component type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredComponentInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1alpha1().Components(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1alpha1().Components(namespace).Watch(context.TODO(), options)
			},
		},
		&apiscorecssapcomv1alpha1.Component{},
		resyncPeriod,
		indexers,
	)
}

func (f *componentInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredComponentInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *componentInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apiscorecssapcomv1alpha1.Component{}, f.defaultInformer)
}

func (f *componentInformer) Lister() corecssapcomv1alpha1.ComponentLister {
	return corecssapcomv1alpha1.NewComponentLister(f.Informer().GetIndexer())
}
